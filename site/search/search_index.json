{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Credits Build Your \"Hello World\" Container Using Python Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#credits","text":"Build Your \"Hello World\" Container Using Python","title":"Credits"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"cleanup/","text":"Cleanup Stop the container Stop the container using podman stop <ContainerID> command PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman stop 3bad5052037c 3bad5052037c Remove the container To delete a Podman container, first make sure that the container has been stopped. Then, use the podman rm command followed by the container's name or ID. To stop a running podman machine, use the podman machine stop command. PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman machine stop Machine \"podman-machine-default\" stopped successfully PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman machine ls NAME VM TYPE CREATED LAST UP CPUS MEMORY DISK SIZE podman-machine-default* wsl 6 hours ago About a minute ago 0 0B 1.777GB PS C:\\Users\\aniru\\workspace\\github\\python-podman>","title":"Cleanup"},{"location":"cleanup/#cleanup","text":"","title":"Cleanup"},{"location":"cleanup/#stop-the-container","text":"Stop the container using podman stop <ContainerID> command PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman stop 3bad5052037c 3bad5052037c","title":"Stop the container"},{"location":"cleanup/#remove-the-container","text":"To delete a Podman container, first make sure that the container has been stopped. Then, use the podman rm command followed by the container's name or ID.","title":"Remove the container"},{"location":"cleanup/#_1","text":"To stop a running podman machine, use the podman machine stop command. PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman machine stop Machine \"podman-machine-default\" stopped successfully PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman machine ls NAME VM TYPE CREATED LAST UP CPUS MEMORY DISK SIZE podman-machine-default* wsl 6 hours ago About a minute ago 0 0B 1.777GB PS C:\\Users\\aniru\\workspace\\github\\python-podman>","title":""},{"location":"create-dockerfile/","text":"Create a DockerFile We will now create a DockerFile that is used to build an OCI image. The image contains all the dependencies the Python application requires, including Python itself. Podman uses DockerFile just like standard docker. In the project directory, create a file named DockerFile FROM python:3 ADD helloworld.py / RUN pip install flask RUN pip install flask_restful EXPOSE 3333 CMD [ \"python\", \"./helloworld.py\"] This tells Podman ( just like Docker ) to: Build an image starting with the Python 3 image Copy helloworld.py to image and set the working directory to / Install python dependencies - flask , flask_restful Expose application port 3333 Run python command when image is started","title":"Create Docker File"},{"location":"create-dockerfile/#create-a-dockerfile","text":"We will now create a DockerFile that is used to build an OCI image. The image contains all the dependencies the Python application requires, including Python itself. Podman uses DockerFile just like standard docker. In the project directory, create a file named DockerFile FROM python:3 ADD helloworld.py / RUN pip install flask RUN pip install flask_restful EXPOSE 3333 CMD [ \"python\", \"./helloworld.py\"] This tells Podman ( just like Docker ) to: Build an image starting with the Python 3 image Copy helloworld.py to image and set the working directory to / Install python dependencies - flask , flask_restful Expose application port 3333 Run python command when image is started","title":"Create a DockerFile"},{"location":"create-image/","text":"Create Image We will use podman build command to build the images using DockerFile PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman build -t helloworld-python -f .\\DockerFile STEP 1/6: FROM python:3 Resolved \"python\" as an alias (/etc/containers/registries.conf.d/000-shortnames.conf) Trying to pull docker.io/library/python:3... Getting image source signatures Copying blob sha256:fa1d4c8d85a4e064e50cea74d4aa848dc5fc275aef223fcc1f21fbdb1b5dd182 Copying blob sha256:81283a9569ad5e90773f038daedd0d565810ca5935eec8f53b8bcb6a199030d6 Copying blob sha256:32de3c850997ce03b6ff4ae8fb00b34b9d7d7f9a35bfcdb8538e22cc7b77c29d Copying blob sha256:60b38700e7fb2cdfac79b15e4c1691a80fe6b4101c7b7fea66b9e7cd64d961cf Copying blob sha256:c796299bbbddc7aeada9539a4e7874a75fa2b6ff421f8d5ad40f227b40ab4d86 Copying blob sha256:0f67f32c26d393a2580062f2cebfde80cc4c5a5e264bbb7a32569c6c7551c1c2 Copying blob sha256:1922a20932d42b7e6dbcad420d9f77ac92bc9eed4a36497944b06abf15dc771e Copying blob sha256:47dd72d73dba61b8cd9fcd0d657feba4ff458a3022f5e435e631af31ca63f58b Copying blob sha256:25f882f6cd8bb7a08d03f58c8e0ea475c5cb0059801f44fdfb0dd8468075c4d8 Copying config sha256:75cc8d87cc34bdb26dfcbe6c9e4483d9b483761510b5069852f52bd8431b8012 Writing manifest to image destination Storing signatures STEP 2/6: ADD helloworld.py / --> dd6bf7aa01b STEP 3/6: RUN pip install flask Collecting flask Downloading Flask-2.2.2-py3-none-any.whl (101 kB) \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 101.5/101.5 kB 1.7 MB/s eta 0:00:00 Collecting Werkzeug>=2.2.2 Downloading Werkzeug-2.2.2-py3-none-any.whl (232 kB) \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 232.7/232.7 kB 5.0 MB/s eta 0:00:00 Collecting Jinja2>=3.0 Downloading Jinja2-3.1.2-py3-none-any.whl (133 kB) \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 133.1/133.1 kB 8.8 MB/s eta 0:00:00 Collecting itsdangerous>=2.0 Downloading itsdangerous-2.1.2-py3-none-any.whl (15 kB) Collecting click>=8.0 Downloading click-8.1.3-py3-none-any.whl (96 kB) \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 9.4 MB/s eta 0:00:00 Collecting MarkupSafe>=2.0 Downloading MarkupSafe-2.1.1.tar.gz (18 kB) Preparing metadata (setup.py): started Preparing metadata (setup.py): finished with status 'done' Building wheels for collected packages: MarkupSafe Building wheel for MarkupSafe (setup.py): started Building wheel for MarkupSafe (setup.py): finished with status 'done' Created wheel for MarkupSafe: filename=MarkupSafe-2.1.1-cp311-cp311-linux_x86_64.whl size=27478 sha256=134d2c399c38a556640a79249b0fec5ac8818ff4e00a7459a2e2aeaf66402147 Stored in directory: /root/.cache/pip/wheels/96/ee/62/407c247ad088bcb67b530ba3ac1479058c58a651bd6bf09a1f Successfully built MarkupSafe Installing collected packages: MarkupSafe, itsdangerous, click, Werkzeug, Jinja2, flask Successfully installed Jinja2-3.1.2 MarkupSafe-2.1.1 Werkzeug-2.2.2 click-8.1.3 flask-2.2.2 itsdangerous-2.1.2 WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv --> 5bee9c9fb08 STEP 4/6: RUN pip install flask_restful C Check image status PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman images REPOSITORY TAG IMAGE ID CREATED SIZE localhost/helloworld-python latest aa9bb579340e 11 seconds ago 978 MB docker.io/library/python 3 75cc8d87cc34 2 weeks ago 954 MB registry.access.redhat.com/ubi8-micro latest 655e3818c6df 2 months ago 28.5 MB","title":"Create Image"},{"location":"create-image/#create-image","text":"We will use podman build command to build the images using DockerFile PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman build -t helloworld-python -f .\\DockerFile STEP 1/6: FROM python:3 Resolved \"python\" as an alias (/etc/containers/registries.conf.d/000-shortnames.conf) Trying to pull docker.io/library/python:3... Getting image source signatures Copying blob sha256:fa1d4c8d85a4e064e50cea74d4aa848dc5fc275aef223fcc1f21fbdb1b5dd182 Copying blob sha256:81283a9569ad5e90773f038daedd0d565810ca5935eec8f53b8bcb6a199030d6 Copying blob sha256:32de3c850997ce03b6ff4ae8fb00b34b9d7d7f9a35bfcdb8538e22cc7b77c29d Copying blob sha256:60b38700e7fb2cdfac79b15e4c1691a80fe6b4101c7b7fea66b9e7cd64d961cf Copying blob sha256:c796299bbbddc7aeada9539a4e7874a75fa2b6ff421f8d5ad40f227b40ab4d86 Copying blob sha256:0f67f32c26d393a2580062f2cebfde80cc4c5a5e264bbb7a32569c6c7551c1c2 Copying blob sha256:1922a20932d42b7e6dbcad420d9f77ac92bc9eed4a36497944b06abf15dc771e Copying blob sha256:47dd72d73dba61b8cd9fcd0d657feba4ff458a3022f5e435e631af31ca63f58b Copying blob sha256:25f882f6cd8bb7a08d03f58c8e0ea475c5cb0059801f44fdfb0dd8468075c4d8 Copying config sha256:75cc8d87cc34bdb26dfcbe6c9e4483d9b483761510b5069852f52bd8431b8012 Writing manifest to image destination Storing signatures STEP 2/6: ADD helloworld.py / --> dd6bf7aa01b STEP 3/6: RUN pip install flask Collecting flask Downloading Flask-2.2.2-py3-none-any.whl (101 kB) \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 101.5/101.5 kB 1.7 MB/s eta 0:00:00 Collecting Werkzeug>=2.2.2 Downloading Werkzeug-2.2.2-py3-none-any.whl (232 kB) \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 232.7/232.7 kB 5.0 MB/s eta 0:00:00 Collecting Jinja2>=3.0 Downloading Jinja2-3.1.2-py3-none-any.whl (133 kB) \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 133.1/133.1 kB 8.8 MB/s eta 0:00:00 Collecting itsdangerous>=2.0 Downloading itsdangerous-2.1.2-py3-none-any.whl (15 kB) Collecting click>=8.0 Downloading click-8.1.3-py3-none-any.whl (96 kB) \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 9.4 MB/s eta 0:00:00 Collecting MarkupSafe>=2.0 Downloading MarkupSafe-2.1.1.tar.gz (18 kB) Preparing metadata (setup.py): started Preparing metadata (setup.py): finished with status 'done' Building wheels for collected packages: MarkupSafe Building wheel for MarkupSafe (setup.py): started Building wheel for MarkupSafe (setup.py): finished with status 'done' Created wheel for MarkupSafe: filename=MarkupSafe-2.1.1-cp311-cp311-linux_x86_64.whl size=27478 sha256=134d2c399c38a556640a79249b0fec5ac8818ff4e00a7459a2e2aeaf66402147 Stored in directory: /root/.cache/pip/wheels/96/ee/62/407c247ad088bcb67b530ba3ac1479058c58a651bd6bf09a1f Successfully built MarkupSafe Installing collected packages: MarkupSafe, itsdangerous, click, Werkzeug, Jinja2, flask Successfully installed Jinja2-3.1.2 MarkupSafe-2.1.1 Werkzeug-2.2.2 click-8.1.3 flask-2.2.2 itsdangerous-2.1.2 WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv --> 5bee9c9fb08 STEP 4/6: RUN pip install flask_restful C","title":"Create Image"},{"location":"create-image/#check-image-status","text":"PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman images REPOSITORY TAG IMAGE ID CREATED SIZE localhost/helloworld-python latest aa9bb579340e 11 seconds ago 978 MB docker.io/library/python 3 75cc8d87cc34 2 weeks ago 954 MB registry.access.redhat.com/ubi8-micro latest 655e3818c6df 2 months ago 28.5 MB","title":"Check image status"},{"location":"run-your-app/","text":"Run your container The easiet way to start a container is using podman run command. podman run -t -p 3333:3333 localhost/helloworld-python Here it is in action. Note that port the application is listening on ( Port:3333) PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman run -p 3333:3333 localhost/hellowrold-python Trying to pull localhost/hellowrold-python:latest... Error: initializing source docker://localhost/hellowrold-python:latest: pinging container registry localhost: Get \"https://localhost/v2/\": dial tcp 127.0.0.1:443: connect: connection refused PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman run -p 3333:3333 localhost/helloworld-python * Serving Flask app 'helloworld' * Debug mode: off WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Running on all addresses (0.0.0.0) * Running on http://127.0.0.1:3333 * Running on http://10.0.2.100:3333 Press CTRL+C to quit 10.0.2.100 - - [06/Jan/2023 04:52:58] \"GET / HTTP/1.1\" 200 - 10.0.2.100 - - [06/Jan/2023 04:52:58] \"GET /favicon.ico HTTP/1.1\" 404 - Check the browser Navigate to http://127.0.0.1:3333 on your browser See results Running container in background You can also use podman run command with -d option to run it in the background PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman run -dt -p 3333:3333 localhost/helloworld-python 3bad5052037cbae1d3b32567faf6e945f91bfc484cf5f2a09808418ba7aa9540 You can check status using podman ps command just like docker ps PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3bad5052037c localhost/helloworld-python:latest python ./hellowor... 4 seconds ago Up 4 seconds ago 0.0.0.0:3333->3333/tcp zen_poitras Manage container lifecycle Once you have the ContainerID you can manage container lifecycle using podman start|stop|restart commands PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman restart 3bad5052037c 3bad5052037c PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3bad5052037c localhost/helloworld-python:latest python ./hellowor... 39 seconds ago Up 3 seconds ago 0.0.0.0:3333->3333/tcp zen_poitras","title":"Run your App"},{"location":"run-your-app/#run-your-container","text":"The easiet way to start a container is using podman run command. podman run -t -p 3333:3333 localhost/helloworld-python Here it is in action. Note that port the application is listening on ( Port:3333) PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman run -p 3333:3333 localhost/hellowrold-python Trying to pull localhost/hellowrold-python:latest... Error: initializing source docker://localhost/hellowrold-python:latest: pinging container registry localhost: Get \"https://localhost/v2/\": dial tcp 127.0.0.1:443: connect: connection refused PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman run -p 3333:3333 localhost/helloworld-python * Serving Flask app 'helloworld' * Debug mode: off WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Running on all addresses (0.0.0.0) * Running on http://127.0.0.1:3333 * Running on http://10.0.2.100:3333 Press CTRL+C to quit 10.0.2.100 - - [06/Jan/2023 04:52:58] \"GET / HTTP/1.1\" 200 - 10.0.2.100 - - [06/Jan/2023 04:52:58] \"GET /favicon.ico HTTP/1.1\" 404 -","title":"Run your container"},{"location":"run-your-app/#check-the-browser","text":"Navigate to http://127.0.0.1:3333 on your browser","title":"Check the browser"},{"location":"run-your-app/#see-results","text":"","title":"See results"},{"location":"run-your-app/#running-container-in-background","text":"You can also use podman run command with -d option to run it in the background PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman run -dt -p 3333:3333 localhost/helloworld-python 3bad5052037cbae1d3b32567faf6e945f91bfc484cf5f2a09808418ba7aa9540 You can check status using podman ps command just like docker ps PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3bad5052037c localhost/helloworld-python:latest python ./hellowor... 4 seconds ago Up 4 seconds ago 0.0.0.0:3333->3333/tcp zen_poitras","title":"Running container in background"},{"location":"run-your-app/#manage-container-lifecycle","text":"Once you have the ContainerID you can manage container lifecycle using podman start|stop|restart commands PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman restart 3bad5052037c 3bad5052037c PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3bad5052037c localhost/helloworld-python:latest python ./hellowor... 39 seconds ago Up 3 seconds ago 0.0.0.0:3333->3333/tcp zen_poitras","title":"Manage container lifecycle"},{"location":"setup/","text":"Initial setup Describe all steps Install podman Follow installation instructions at Podman for Windows Podman machine init process PS C:\\Users\\aniru> podman machine init Extracting compressed file Importing operating system into WSL (this may take a few minutes on a new WSL install)... Configuring system... Generating public/private ed25519 key pair. Your identification has been saved in podman-machine-default Your public key has been saved in podman-machine-default.pub The key fingerprint is: Machine init complete To start your machine run: podman machine start Podman machine start PS C:\\Users\\aniru> podman machine start Starting machine \"podman-machine-default\" This machine is currently configured in rootless mode. If your containers require root permissions (e.g. ports < 1024), or if you run into compatibility issues with non-podman clients, you can switch using the following command: podman machine set --rootful API forwarding listening on: npipe:////./pipe/podman-machine-default Another process was listening on the default Docker API pipe address. You can still connect Docker API clients by setting DOCKER HOST using the following powershell command in your terminal session: $Env:DOCKER_HOST = 'npipe:////./pipe/podman-machine-default' Or in a classic CMD prompt: set DOCKER_HOST = 'npipe:////./pipe/podman-machine-default' Alternatively terminate the other process and restart podman machine. Machine \"podman-machine-default\" started successfully Test podman We test podman installation by running a micro image from redhat that runs the date command PS C:\\Users\\aniru> podman run ubi8-micro date Resolved \"ubi8-micro\" as an alias (/etc/containers/registries.conf.d/000-shortnames.conf) Trying to pull registry.access.redhat.com/ubi8-micro:latest... Getting image source signatures Check`ing if image destination supports signatures Copying blob sha256:fdb82fb306d5fe8a181e0c0703110bd192c0bbb8ab32a727d4e268f22a3e3262 Copying config sha256:655e3818c6df1519b648e932994e941985699873946fd12ac8ff250dfca2d6bf Writing manifest to image destination Storing signatures Fri Jan 6 03:01:52 UTC 2023 Check podman machine status PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman machine ls NAME VM TYPE CREATED LAST UP CPUS MEMORY DISK SIZE podman-machine-default* wsl 6 hours ago Currently running 8 920.3MB 1.542GB","title":"Setup"},{"location":"setup/#initial-setup","text":"Describe all steps","title":"Initial setup"},{"location":"setup/#install-podman","text":"Follow installation instructions at Podman for Windows","title":"Install podman"},{"location":"setup/#podman-machine-init-process","text":"PS C:\\Users\\aniru> podman machine init Extracting compressed file Importing operating system into WSL (this may take a few minutes on a new WSL install)... Configuring system... Generating public/private ed25519 key pair. Your identification has been saved in podman-machine-default Your public key has been saved in podman-machine-default.pub The key fingerprint is: Machine init complete To start your machine run: podman machine start","title":"Podman machine init process"},{"location":"setup/#podman-machine-start","text":"PS C:\\Users\\aniru> podman machine start Starting machine \"podman-machine-default\" This machine is currently configured in rootless mode. If your containers require root permissions (e.g. ports < 1024), or if you run into compatibility issues with non-podman clients, you can switch using the following command: podman machine set --rootful API forwarding listening on: npipe:////./pipe/podman-machine-default Another process was listening on the default Docker API pipe address. You can still connect Docker API clients by setting DOCKER HOST using the following powershell command in your terminal session: $Env:DOCKER_HOST = 'npipe:////./pipe/podman-machine-default' Or in a classic CMD prompt: set DOCKER_HOST = 'npipe:////./pipe/podman-machine-default' Alternatively terminate the other process and restart podman machine. Machine \"podman-machine-default\" started successfully","title":"Podman machine start"},{"location":"setup/#test-podman","text":"We test podman installation by running a micro image from redhat that runs the date command PS C:\\Users\\aniru> podman run ubi8-micro date Resolved \"ubi8-micro\" as an alias (/etc/containers/registries.conf.d/000-shortnames.conf) Trying to pull registry.access.redhat.com/ubi8-micro:latest... Getting image source signatures Check`ing if image destination supports signatures Copying blob sha256:fdb82fb306d5fe8a181e0c0703110bd192c0bbb8ab32a727d4e268f22a3e3262 Copying config sha256:655e3818c6df1519b648e932994e941985699873946fd12ac8ff250dfca2d6bf Writing manifest to image destination Storing signatures Fri Jan 6 03:01:52 UTC 2023","title":"Test podman"},{"location":"setup/#check-podman-machine-status","text":"PS C:\\Users\\aniru\\workspace\\github\\python-podman> podman machine ls NAME VM TYPE CREATED LAST UP CPUS MEMORY DISK SIZE podman-machine-default* wsl 6 hours ago Currently running 8 920.3MB 1.542GB","title":"Check podman machine status"}]}